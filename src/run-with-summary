#!/usr/bin/env bash

usage() {
  cat <<'USAGE'
Usage: run-with-summary <command and args>

Executes the given command, streams its output, and writes a Markdown summary to $FILE.

Environment variables:
  HEADING           Custom text for the h1 tag. (default: "Running Command...")
  SUMMARY           Short text to display below the header.
  SUCCESS           Custom success message (default: "Command succeeded").
  ERROR             Custom error message (default: "Command failed").
  DEBUG             If set (non-empty), include User/Host/Directory in the summary.
  FILE              Markdown report file (default: /tmp/summary.md

Examples:
  run-with-summary scripts/deploy.sh

  HEADING="Deployment" \
  SUMMARY="Deploy script running as an example." \
  SUCCESS="Deploy successful! :rocket:" \
  ERROR="DEPLOY FAILED! :x:" \
  DEBUG=1 \
  FILE=reports/$(date).md \
    run-with-summary scripts/deploy.sh

USAGE
}

set -e

# Customize the success and error messages.
command="$@"
heading_message=${HEADING:-"Command executed"}
summary=${SUMMARY:-"Started $(date)"}
success_message=${SUCCESS:-"Command executed successfully."}
error_message=${ERROR:-"Command failed"}

# Print extra stuff like user and hostname in the summary.
debug=${DEBUG:-""}

# Print the markdown summary after the command output.
temp_report_file=${FILE:-"/tmp/summary.md"}

if [ -z "$command" ]; then
    usage
    exit 1
fi

# Format output into markdown report
format_output() {
    local command="$1"
    local exit_code="$2"
    local start_time="$3"
    local end_time="$4"
    local duration=$((end_time - start_time))
    
    local start_date=$(date -d "@$start_time" '+%Y-%m-%d %H:%M:%S %Z' 2>/dev/null || date -r $start_time '+%Y-%m-%d %H:%M:%S %Z')
    local end_date=$(date -d "@$end_time" '+%Y-%m-%d %H:%M:%S %Z' 2>/dev/null || date -r $end_time '+%Y-%m-%d %H:%M:%S %Z')

    local message="$error_message"
    if [ "$exit_code" -eq 0 ]; then
        message="$success_message"
    fi

    echo "| Command    | \`$command\`"
    echo "|------------|-----------------------"
    echo "| Exit Code  | \`$exit_code\`"
    echo "| Start Time | $start_date"
    echo "| End Time   | $end_date"
    echo "| Duration   | ${duration}s"

    if [[ -n $debug ]]; then
      echo "| User       | $(whoami) "
      echo "| Host       | $(hostname -f)"
      echo "| Directory  | $(pwd)"
    fi
    echo
    echo $message
}



# Record start time
start_time=$(date '+%s')

# Execute command and show output in real time while capturing it
# Use a temporary file to store output
temp_output_file=$(mktemp)

if [[ -n ${heading_message} ]]; then
  echo "# ${heading_message}"
fi

if [[ -n ${summary} ]]; then
  echo "${summary}"
fi

echo "\`\`\`"
echo "$command"
echo "\`\`\`"
echo
echo "\`\`\`"

set -o pipefail
$command
exit_code=${PIPESTATUS[0]}
echo "\`\`\`"

end_time=$(date '+%s')

# Generate markdown report
format_output "$command" "$exit_code" "$start_time" "$end_time"

# Exit same as command.
exit "$exit_code"
